general:
  balance: False
  balance_polarity: False
  calc_cm: True
  calc_train_score: True
  cv: "logo"
  data_dir: ./data/csv-files/prepared/dataset/train
  drop_empty: True
  just_train: False
  max_duration: "60 seconds"
  max_len: null
  min_duration: &min_duration "60 seconds"
  min_len: 0
  n_jobs: 1
  normalize_pd: True
  output_dir: ./output/tmp
  overwrite_output_dir: False
  repeat: null
  save_models: True
  show_plots: False
  split: True
  step_duration: "30 seconds"
  treat_negative_values: "absolute"
  verbose: False

defects:
- cavity
- floating
- free_particle
- particle_insulator
- protrusion_earth
- protrusion_hv

models-to-run:
- knn-finger_ott
- knn-finger_own
- knn-finger_relown
- knn-finger_tugraz
- lgbm-finger_all
- lgbm-finger_ott
- lgbm-finger_own
- lgbm-finger_relown
- lgbm-finger_tugraz
- mlp-finger_all
- mlp-finger_ott
- mlp-finger_own
- mlp-finger_relown
- mlp-finger_tugraz
- rf-finger_all
- rf-finger_ott
- rf-finger_own
- rf-finger_relown
- rf-finger_tugraz
- svm-finger_ott
- svm-finger_own
- svm-finger_relown
- svm-finger_tugraz

defaults:
  batch_size: &batch_size 5
  dropout: &dropout 0.01
  duration: &duration "30 seconds"
  epochs: &epochs 40
  n_jobs: &n_jobs 1
  optimizer: &optimizer "adam"
  step_duration: &step_duration "10 seconds"
  verbose: &verbose 0

  mlp_grid: &mlp_grid
    batch_size:
      - 1
      - 5
      - 10
    dropout:
      - 0.0
      - 0.05
      - 0.2
    hidden_layer_sizes:
      - !!python/tuple [5]
      - !!python/tuple [20]
      - !!python/tuple [5,3]
      - !!python/tuple [20,3]
    epochs:
      - 50
      - 100

  kbest_grid: &kbest_grid
    k:
      - 20
      - 50
      - 100

  lgbm_grid: &lgbm_grid
    num_leaves: [5, 8, 10, 12, 20]
    min_child_samples: [6, 10, 15]
    min_split_gain: [0.05, 0.1, 0.15]
    colsample_bytree: [1.0, 0.9, 0.8, 0.7]


models:
  knn-finger_ott:
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 5
      weights: "uniform"

  knn-finger_own:
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 5
      weights: "distance"
    select:
      variance: True

  knn-finger_relown:
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
      weights: "uniform"

  knn-finger_tugraz:
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 10
      weights: "distance"

  knn-tsfresh:
    data:
        tsfresh_data: ./data/csv-files/prepared/dataset/train/tsfresh_features_efficient_duration60seconds_stepduration30seconds.data
    select:
      tsfresh:
        fdr_level: 0.0001
        multiclass: True
        n_significant: 5
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 5
      weights: "uniform"

  knn_dtw-seqfinger_seqown:
    normalize: "zscore"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    data:
      duration: *duration
      step_duration: *step_duration

  ott_algo-finger_ott:
    normalize: "none"

  mlp-finger_ott:
    normalize: "zscore"
    classifier:
      batch_size: 1
      hidden_layer_sizes: !!python/tuple [20]
      dropout: 0.2
      optimizer: *optimizer
      epochs: 150
      verbose: *verbose
    grid: "fingerprint_compare"

  mlp-tsfresh:
    data:
        tsfresh_data: ./data/csv-files/prepared/dataset/train/tsfresh_features_efficient_duration60seconds_stepduration30seconds.data
    select:
      tsfresh:
        fdr_level: 0.0001
        multiclass: True
        n_significant: 5
    normalize: "zscore"
    classifier:
      batch_size: 1
      class_weight: null
      dropout: 0.05
      epochs: 150
      hidden_layer_sizes: !!python/tuple [20,10]
      optimizer: *optimizer
      verbose: *verbose
    grid: "fingerprint_compare"

  mlp-finger_all:
    normalize: "zscore"
    classifier:
      hidden_layer_sizes: !!python/tuple [15,5]
      dropout: 0.01
      optimizer: *optimizer
      batch_size: *batch_size
      hidden_layer_sizes: !!python/tuple [5]
      epochs: *epochs
      verbose: *verbose
    grid: "fingerprint_compare"

  mlp-finger_own:
    normalize: "zscore"
    classifier:
      batch_size: 1
      dropout: 0.05
      epochs: 50
      hidden_layer_sizes: !!python/tuple [20]
      optimizer: *optimizer
      verbose: *verbose
    grid: "fingerprint_compare"

  mlp-finger_relown:
    normalize: "zscore"
    classifier:
      batch_size: 1
      class_weight:
        0: 1.0212121212121212,
        1: 0.8467336683417085,
        2: 1.2389705882352942,
        3: 1.2210144927536233,
        4: 1.1950354609929077,
        5: 0.7262931034482759}
      hidden_layer_sizes: !!python/tuple [20]
      dropout: 0.05
      optimizer: *optimizer
      epochs: 150
      verbose: *verbose
    grid: "fingerprint_compare"

  mlp-finger_tugraz:
    normalize: "zscore"
    classifier:
      batch_size: 1
      class_weight: null
      hidden_layer_sizes: !!python/tuple [20]
      dropout: 0.0
      optimizer: *optimizer
      epochs: 100
      verbose: *verbose
    grid: "fingerprint_compare"

  lgbm-finger_ott:
    normalize: "none"
    classifier:
      class_weight: "balanced"
      colsample_bytree: 1.0
      max_bin: 63
      min_split_gain: 0.0
      n_jobs: *n_jobs
      num_leaves: 30
    grid:
      classifier: *lgbm_grid

  lgbm-finger_tugraz:
    normalize: "none"
    classifier:
      class_weight: "balanced"
      colsample_bytree: 1.0
      max_bin: 127
      min_split_gain: 0.0
      n_jobs: *n_jobs
      num_leaves: 10
    grid:
      classifier: *lgbm_grid

  lgbm-finger_own:
    normalize: "none"
    classifier:
      class_weight: "balanced"
      colsample_bytree: 0.8
      max_bin: 63
      min_split_gain: 0.0
      n_jobs: *n_jobs
      num_leaves: 30
    grid:
      classifier: *lgbm_grid

  lgbm-finger_relown:
    normalize: "none"
    classifier:
      class_weight: null
      colsample_bytree: 0.8
      max_bin: 127
      min_split_gain: 0.0
      n_jobs: *n_jobs
      num_leaves: 10
    grid:
      classifier: *lgbm_grid

  lgbm-tsfresh:
    data:
        tsfresh_data: ./data/csv-files/prepared/dataset/train/tsfresh_features_efficient_duration60seconds_stepduration30seconds.data
    select:
      tsfresh:
        fdr_level: 0.0001
        multiclass: True
        n_significant: 5
    normalize: "none"
    classifier:
      class_weight: "balanced"
      colsample_bytree: 0.8
      max_bin: 63
      min_split_gain: 0.0
      num_leaves: 30
      n_jobs: *n_jobs

  lgbm-finger_all:
    normalize: "none"
    classifier:
      class_weight: "balanced"
      colsample_bytree: 1.0
      max_bin: 255
      min_child_samples: 50
      min_split_gain: 0.01
      n_jobs: *n_jobs
      num_iterations: 60
      num_leaves: 10
      path_smooth: 0.0
    grid:
      classifier: *lgbm_grid

  svm-finger_ott:
    normalize: "zscore"
    classifier:
      class_weight: "balanced"
      decision_function_shape: "ovr"
      kernel: "linear"

  svm-finger_own:
    normalize: "zscore"
    classifier:
      class_weight: "balanced"
      decision_function_shape: "ovr"
      kernel: "rbf"
    select:
      variance: True

  svm-finger_relown:
    normalize: "zscore"
    classifier:
      class_weight: "balanced"
      decision_function_shape: "ovr"
      kernel: "rbf"

  svm-finger_tugraz:
    normalize: "zscore"
    classifier:
      class_weight: null
      decision_function_shape: "ovr"
      kernel: "rbf"

  svm-tsfresh:
    data:
        tsfresh_data: ./data/csv-files/prepared/dataset/train/tsfresh_features_efficient_duration60seconds_stepduration30seconds.data
    select:
      tsfresh:
        fdr_level: 0.0001
        multiclass: True
        n_significant: 5
    normalize: "minmax"
    classifier:
      class_weight: "balanced"
      decision_function_shape: "ovr"
      kernel: "linear"

  svm_dtw-seqfinger_seqown:
    normalize: "zscore"
    data:
      duration: *duration
      step_duration: *step_duration

  rf-finger_ott:
    normalize: "none"
    classifier:
      class_weight: null
      bootstrap: True
      min_samples_leaf: 30
      n_jobs: *n_jobs

  rf-finger_own:
    normalize: "none"
    classifier:
      n_jobs: *n_jobs
      class_weight: "balanced"
      bootstrap: False
      min_samples_leaf: 2
    select:
      variance: True

  rf-finger_relown:
    normalize: "none"
    classifier:
      n_jobs: *n_jobs
      class_weight: "balanced"
      bootstrap: False
      min_samples_leaf: 10

  rf-finger_tugraz:
    normalize: "none"
    classifier:
      n_jobs: *n_jobs
      bootstrap: True
      class_weight: null
      min_samples_leaf: 5

  rf-finger_all:
    normalize: "none"
    classifier:
      n_jobs: *n_jobs
      class_weight: "balanced"

  rf-tsfresh:
    data:
        tsfresh_data: ./data/csv-files/prepared/dataset/train/tsfresh_features_efficient_duration60seconds_stepduration30seconds.data
    select:
      tsfresh:
        fdr_level: 0.0001
        multiclass: True
        n_significant: 5
    normalize: "none"
    classifier:
      bootstrap: True
      class_weight: "balanced"
      min_samples_leaf: 5
      n_jobs: *n_jobs
