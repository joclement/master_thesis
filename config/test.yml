general:
  balance: True
  balance_polarity: False
  normalize_pd: True
  calc_train_score: True
  verbose: False
  n_jobs: 2
  cv: 2
  data_dir: ./data/csv-files/testdata_small
  calc_cm: False
  output_dir: ./output/test_tmp
  overwrite_output_dir: True
  save_models: False
  show_plots: False
  min_duration: &min_duration "60 seconds"
  step_duration: null
  max_duration: "60 seconds"
  split: True
  min_len: 10
  max_len: null
  repeat: null
  drop_empty: True
  treat_negative_values: "absolute"
  cache_dir: ./cache

defects:
  - free_particle
  - particle_insulator
  - protrusion_earth
  - protrusion_hv
  - floating
  - cavity

models-to-run:
  - dt-finger_own
  - bossvs-oned
  - knn_dtw-oned
  - knn_dtw-twod
  - knn_dtw-seqfinger_seqown
  - knn-oned
  - pytsknn-oned
  - knn-oned_boss
  - knn-finger_ott
  - mlp-tsfresh
  - ott_algo-finger_ott
  - rf-finger_tugraz
  - svm_dtw-seqfinger_seqown
  - svm-finger_all
  - lgbm-finger_own

defaults:
  duration: &duration "30 seconds"
  step_duration: &step_duration "10 seconds"
  n_jobs: &n_jobs 1
  stop_early: &stop_early False
  patience: &patience 1
  batch_size: &batch_size 10
  epochs: &epochs 3
  verbose: &verbose 0

  dt_grid: &dt_grid
    class_weight:
      - "balanced"
      - null
    min_samples_leaf:
      - 3
      - 5

  mlp_grid: &mlp_grid
    hidden_layer_sizes:
      - !!python/tuple [3]
      - !!python/tuple [3, 3]
    epochs:
      - 5
      - 10

models:
  bossvs-oned:
    normalize: "none"
    reshaper: True
    data:
      fix_duration: *min_duration
      frequency: "500ms"
    classifier:
      anova: True
      strategy: "entropy"

  knn-oned:
    normalize: "minmax"
    reshaper: True
    data:
      fix_duration: *min_duration
      frequency: "5000ms"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 5
      weights: "distance"
    grid:
      classifier:
        n_neighbors:
          - 1
          - 3
          - 7
        weights:
          - "uniform"
          - "distance"
        metric:
          - "euclidean"
          - "manhatten"

  pytsknn-oned:
    normalize: "minmax"
    reshaper: True
    data:
      fix_duration: *min_duration
      frequency: "5000ms"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 5
      weights: "distance"
      metric: "dtw_fast"
    grid:
      classifier:
        n_neighbors:
          - 1
          - 3
          - 7
        weights:
          - "uniform"
          - "distance"
        metric:
          - "dtw_fast"

  knn_dtw-oned:
    normalize: "zscore"
    data:
      fix_duration: *min_duration
      frequency: "5000ms"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    grid:
      classifier:
        n_neighbors:
          - 1
          - 3
      oned:
        frequency:
          - "2000ms"
          - "5000ms"

  knn_dtw-twod:
    normalize: "none"
    data:
      max_len: 10000
      normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    grid:
      twod:
        normalize:
          - "none"
          - "zscore"
          - "minmax"

  knn-oned_boss:
    normalize: "none"
    data:
      oned:
        fix_duration: *min_duration
        frequency: "500ms"
      boss:
        strategy: "entropy"

  knn-finger_ott:
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    select:
      variance: True

  knn-finger_own:
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    select:
      variance: True

  knn-finger_tugraz:
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    grid:
      classifier: *dt_grid
    select:
      variance: True

  knn-finger_both:
    normalize: "minmax"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1

  knn_dtw-seqfinger_seqown:
    normalize: "zscore"
    data:
      duration: *duration
      step_duration: *step_duration
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1

  ott_algo-finger_ott:
    normalize: "none"

  mlp-tsfresh:
    data:
      tsfresh_data: ./data/csv-files/testdata_small/tsfresh-features-0.6.1_minimal_60seconds.data
    normalize: "zscore"
    classifier:
      hidden_layer_sizes: !!python/tuple [20,10]
      dropout: 0.01
      optimizer: "adam"
      batch_size: *batch_size
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid:
      classifier: *mlp_grid

  mlp-finger_ott:
    normalize: "zscore"
    classifier:
      n_jobs: *n_jobs
      batch_size: *batch_size
      hidden_layer_sizes: !!python/tuple [5]
      dropout: 0.05
      optimizer: "adam"
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid:
      classifier: *mlp_grid

  mlp-finger_own:
    normalize: "zscore"
    classifier:
      n_jobs: *n_jobs
      hidden_layer_sizes: !!python/tuple [3]
      dropout: 0.05
      optimizer: "adam"
      batch_size: *batch_size
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid:
      classifier: *mlp_grid
    select:
      variance: True
      rfe:
        features: 20

  mlp-finger_all:
    normalize: "zscore"
    classifier:
      n_jobs: *n_jobs
      hidden_layer_sizes: !!python/tuple [3]
      dropout: 0.05
      optimizer: "adam"
      batch_size: *batch_size
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid:
      classifier: *mlp_grid
    select:
      frommodel:
        penalty: "l1"


  mlp-finger_tugraz:
    normalize: "zscore"
    classifier:
      n_jobs: *n_jobs
      batch_size: *batch_size
      hidden_layer_sizes: !!python/tuple [4]
      dropout: 0.05
      optimizer: "adam"
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose

  mlp-finger_both:
    normalize: "zscore"
    classifier:
      n_jobs: *n_jobs
      batch_size: *batch_size
      hidden_layer_sizes:
        - 6
      dropout: 0.05
      optimizer: "adam"
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose

  svm-finger_all:
    normalize: "zscore"
    classifier:
      decision_function_shape: "ovr"

  svm-finger_ott:
    normalize: "zscore"
    classifier:
      decision_function_shape: "ovr"

  svm-finger_own:
    normalize: "zscore"
    classifier:
      decision_function_shape: "ovr"
    select:
      variance: True

  svm-finger_tugraz:
    normalize: "zscore"
    classifier:
      decision_function_shape: "ovr"

  svm-finger_both:
    normalize: "zscore"
    classifier:
      decision_function_shape: "ovr"

  svm_dtw-seqfinger_seqown:
    normalize: "zscore"
    data:
      duration: *duration
      step_duration: *step_duration

  dt-finger_ott:
    normalize: "none"
    grid:
      classifier: *dt_grid

  dt-finger_own:
    normalize: "none"
    grid:
      classifier: *dt_grid
    select:
      variance: True

  dt-finger_tugraz:
    normalize: "none"
    grid:
      classifier: *dt_grid

  dt-finger_both:
    normalize: "none"

  rf-finger_ott:
    normalize: "none"

  rf-finger_own:
    normalize: "none"
    select:
      variance: True

  rf-finger_tugraz:
    normalize: "none"

  lgbm-tsfresh:
    data:
      tsfresh_data: ./data/csv-files/testdata_small/tsfresh-features-0.6.1_minimal_60seconds.data
    normalize: "none"
    classifier:
      n_jobs: *n_jobs

  lgbm-finger_own:
    normalize: "none"
    classifier:
      min_split_gain: 0.1
      max_depth: 3
      num_leaves: 3
      n_jobs: *n_jobs
