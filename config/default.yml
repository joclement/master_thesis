general:
  normalize_fingerprints: False
  calc_train_score: True
  verbose: False
  n_jobs: 3
  cv: "logo"
  data_dir: ./data/csv-files/prepared/dataset/train
  calc_cm: True
  output_dir: ./output/tmp
  overwrite_output_dir: False
  save_models: False
  show_plots: False
  min_duration: &min_duration "60 seconds"
  max_duration: "60 seconds"
  split: True
  drop_empty: True
  treat_negative_values: "absolute"
  cache_dir: ./cache

defects:
  - free_particle
  - particle_insulator
  - protrusion_earth
  - protrusion_hv
  - floating
  - cavity

models-to-run:
  - knn-finger_ott
  - knn-finger_own
  - knn-finger_tugraz
  - mlp-finger_ott
  - mlp-finger_own
  - mlp-finger_tugraz
  - mlp-finger_all
  - mlp-tsfresh
  - rf-finger_ott
  - rf-finger_own
  - rf-finger_tugraz
  - rf-finger_all
  - rf-tsfresh
  - svm-finger_ott
  - svm-finger_own
  - svm-finger_tugraz

defaults:
  duration: &duration "30 seconds"
  step_duration: &step_duration "10 seconds"
  optimizer: &optimizer "adam"
  dropout: &dropout 0.01
  normalize: &normalize True
  n_jobs: &n_jobs 1
  batch_size: &batch_size 5
  stop_early: &stop_early False
  patience: &patience 11
  epochs: &epochs 40
  verbose: &verbose 0

  mlp_grid: &mlp_grid
    batch_size:
      - 1
      - 5
      - 10
    dropout:
      - 0.0
      - 0.05
      - 0.2
    hidden_layer_sizes:
      - !!python/tuple [5]
      - !!python/tuple [20]
      - !!python/tuple [5,3]
      - !!python/tuple [20,3]
    epochs:
      - 50
      - 100

  kbest_grid: &kbest_grid
    k:
      - 20
      - 50
      - 100


models:
  knn_dtw-oned:
    normalize: *normalize
    data:
      fix_duration: *min_duration
      frequency: "20ms"
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    grid:
      classifier:
        n_neighbors:
          - 1
          - 3
          - 7
        weights:
          - "uniform"
          - "distance"
        metric:
          - "dtw"
          - "euclidean"
      oned:
        frequency:
          - "30ms"
          - "50ms"
          - "100ms"

  knn_dtw-twod:
    data:
      normalize: False
      max_len: 100000
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    grid:
      twod:
        normalize:
          - True
          - False

  knn-finger_ott:
    normalize: *normalize
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1

  knn-finger_own:
    normalize: *normalize
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    select:
      variance: True

  knn-finger_tugraz:
    normalize: *normalize
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1

  knn_dtw-seqfinger_seqown:
    normalize: *normalize
    classifier:
      n_jobs: *n_jobs
      n_neighbors: 1
    data:
      duration: *duration
      step_duration: *step_duration

  ott_algo-finger_ott:
    normalize: False

  mlp-finger_ott:
    normalize: *normalize
    classifier:
      batch_size: *batch_size
      hidden_layer_sizes: !!python/tuple [5]
      dropout: *dropout
      optimizer: *optimizer
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid: "fingerprint_compare"

  mlp-tsfresh:
    data:
        tsfresh_data: ./data/csv-files/prepared/dataset/train/tsfresh-features_efficient_60seconds_maxlen-100000.data
    normalize: *normalize
    classifier:
      hidden_layer_sizes: !!python/tuple [5,3]
      dropout: 0.0
      optimizer: *optimizer
      batch_size: 1
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid:
      classifier: *mlp_grid
      selector: *kbest_grid
    select:
      kbest:
        k: 100


  mlp-finger_all:
    normalize: *normalize
    classifier:
      hidden_layer_sizes: !!python/tuple [15,5]
      dropout: 0.01
      optimizer: *optimizer
      batch_size: *batch_size
      hidden_layer_sizes: !!python/tuple [5]
      epochs: *epochs
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid: "fingerprint_compare"

  mlp-finger_own:
    normalize: *normalize
    classifier:
      hidden_layer_sizes: !!python/tuple [20]
      dropout: 0.0
      optimizer: *optimizer
      batch_size: 1
      epochs: 100
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid: "fingerprint_compare"

  mlp-finger_tugraz:
    normalize: *normalize
    classifier:
      batch_size: 1
      hidden_layer_sizes: !!python/tuple [20, 10]
      dropout: 0.05
      optimizer: *optimizer
      epochs: 100
      stop_early: *stop_early
      patience: *patience
      verbose: *verbose
    grid: "fingerprint_compare"

  svm-finger_ott:
    normalize: *normalize
    classifier:
      decision_function_shape: "ovr"

  svm-finger_own:
    normalize: *normalize
    classifier:
      decision_function_shape: "ovr"
      class_weight: "balanced"
    select:
      variance: True

  svm-finger_tugraz:
    normalize: *normalize
    classifier:
      decision_function_shape: "ovr"

  svm_dtw-seqfinger_seqown:
    normalize: *normalize
    data:
      duration: *duration
      step_duration: *step_duration

  rf-finger_ott:
    normalize: *normalize
    classifier:
      class_weight: "balanced"
      bootstrap: True
      min_samples_leaf: 1
      n_jobs: *n_jobs

  rf-finger_own:
    normalize: *normalize
    classifier:
      n_jobs: *n_jobs
      class_weight: "balanced"
      bootstrap: True
      min_samples_leaf: 3
    select:
      variance: True

  rf-finger_tugraz:
    normalize: *normalize
    classifier:
      n_jobs: *n_jobs
      class_weight: "balanced"

  rf-finger_all:
    normalize: *normalize
    classifier:
      n_jobs: *n_jobs
      class_weight: "balanced"

  rf-tsfresh:
    data:
        tsfresh_data: ./data/csv-files/prepared/dataset/train/tsfresh-features_efficient_60seconds_maxlen-100000.data
    normalize: *normalize
    classifier:
      n_jobs: *n_jobs
    grid: "fingerprint_compare"
